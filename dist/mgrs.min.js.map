{"version":3,"file":"mgrs.min.js","sources":["../mgrs.js"],"sourcesContent":["/**\r\n * UTM zones are grouped, and assigned to one of a group of 6\r\n * sets.\r\n *\r\n * {int} @private\r\n */\r\nconst NUM_100K_SETS = 6;\r\n\r\n/**\r\n * The column letters (for easting) of the lower left value, per\r\n * set.\r\n *\r\n * {string} @private\r\n */\r\nconst SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\r\n\r\n/**\r\n * The row letters (for northing) of the lower left value, per\r\n * set.\r\n *\r\n * {string} @private\r\n */\r\nconst SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\r\n\r\nconst A = 65; // A\r\nconst I = 73; // I\r\nconst O = 79; // O\r\nconst V = 86; // V\r\nconst Z = 90; // Z\r\n\r\n/**\r\n * First eccentricity squared\r\n * {number} @private\r\n */\r\nconst ECC_SQUARED = 0.00669438;\r\n\r\n/**\r\n * Scale factor along the central meridian\r\n * {number} @private\r\n */\r\nconst SCALE_FACTOR = 0.9996;\r\n\r\n/**\r\n * Semimajor axis (half the width of the earth) in meters\r\n * {number} @private\r\n */\r\nconst SEMI_MAJOR_AXIS = 6378137;\r\n\r\n/**\r\n * The easting of the central meridian of each UTM zone\r\n * {number} @private\r\n */\r\nconst EASTING_OFFSET = 500000;\r\n\r\n/**\r\n * The northing of the equator for southern hemisphere locations (in UTM)\r\n * {number} @private\r\n */\r\nconst NORTHING_OFFFSET = 10000000;\r\n\r\n/**\r\n * UTM zone width in degrees\r\n * {number} private\r\n */\r\nconst UTM_ZONE_WIDTH = 6;\r\n\r\n/**\r\n * Half the width of a UTM zone in degrees\r\n * {number} private\r\n */\r\nconst HALF_UTM_ZONE_WIDTH = UTM_ZONE_WIDTH / 2;\r\n\r\n/**\r\n * Convert lat/lon to MGRS.\r\n *\r\n * @param {[number, number]} ll Array with longitude and latitude on a\r\n *     WGS84 ellipsoid.\r\n * @param {number} [accuracy=5] Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\r\n *      100 m, 2 for 1 km, 1 for 10 km or 0 for 100 km). Optional, default is 5.\r\n * @return {string} the MGRS string for the given location and accuracy.\r\n */\r\nexport function forward(ll, accuracy) {\r\n  accuracy = typeof accuracy === 'number' ? accuracy : 5; // default accuracy 1m\r\n\r\n  if (!Array.isArray(ll)) {\r\n    throw new TypeError('forward did not receive an array');\r\n  }\r\n\r\n  if (typeof ll[0] === 'string' || typeof ll[1] === 'string') {\r\n    throw new TypeError('forward received an array of strings, but it only accepts an array of numbers.');\r\n  }\r\n\r\n  const [ lon, lat ] = ll;\r\n  if (lon < -180 || lon > 180) {\r\n    throw new TypeError(`forward received an invalid longitude of ${lon}`);\r\n  }\r\n  if (lat < -90 || lat > 90) {\r\n    throw new TypeError(`forward received an invalid latitude of ${lat}`);\r\n  }\r\n\r\n  if (lat < -80 || lat > 84) {\r\n    throw new TypeError(`forward received a latitude of ${lat}, but this library does not support conversions of points in polar regions below 80°S and above 84°N`);\r\n  }\r\n\r\n  return encode(LLtoUTM({ lat, lon }), accuracy);\r\n}\r\n\r\n/**\r\n * Convert MGRS to lat/lon bounding box.\r\n *\r\n * @param {string} mgrs MGRS string.\r\n * @return {[number,number,number,number]} An array with left (longitude),\r\n *    bottom (latitude), right\r\n *    (longitude) and top (latitude) values in WGS84, representing the\r\n *    bounding box for the provided MGRS reference.\r\n */\r\nexport function inverse(mgrs) {\r\n  const bbox = UTMtoLL(decode(mgrs.toUpperCase()));\r\n  if (typeof bbox.lat === 'number' && typeof bbox.lon === 'number') {\r\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\r\n  }\r\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\r\n}\r\n\r\n/**\r\n * Convert MGRS to lat/lon polygon.\r\n *  \r\n * * @param {string} mgrs MGRS string.\r\n * * @return {[number,number][]} An array of arrays with longitude and latitude\r\n * *    values in WGS84, representing the corners of the polygon for the\r\n * *    provided MGRS reference.\r\n * */\r\n\r\n\r\nexport function polygon(mgrsString) {\r\n  // 1. Convert MGRS to UTM\r\n\r\n\r\n  // 2. Get UTM zone and easting/northing\r\n  const utm = decode(mgrsString.toUpperCase());\r\n\r\n  // 3. Calculate bounding corners using true UTM math\r\n  const eastingMin = Math.floor(utm.easting / 10000) * 10000;\r\n  const northingMin = Math.floor(utm.northing / 10000) * 10000;\r\n  const eastingMax = eastingMin + 10000;\r\n  const northingMax = northingMin + 10000;\r\n\r\n  const bottomLeft = UTMtoLL({ easting: eastingMin, northing: northingMin, zoneNumber: utm.zoneNumber, zoneLetter: utm.zoneLetter });\r\n  const bottomRight = UTMtoLL({ easting: eastingMax, northing: northingMin, zoneNumber: utm.zoneNumber, zoneLetter: utm.zoneLetter });\r\n  const topRight = UTMtoLL({ easting: eastingMax, northing: northingMax, zoneNumber: utm.zoneNumber, zoneLetter: utm.zoneLetter });\r\n  const topLeft = UTMtoLL({ easting: eastingMin, northing: northingMax, zoneNumber: utm.zoneNumber, zoneLetter: utm.zoneLetter });\r\n\r\n  return [\r\n      [bottomLeft.lon, bottomLeft.lat],\r\n      [bottomRight.lon, bottomRight.lat],\r\n      [topRight.lon, topRight.lat],\r\n      [topLeft.lon, topLeft.lat],\r\n      [bottomLeft.lon, bottomLeft.lat] // Close the polygon\r\n  ];\r\n}\r\n\r\nexport function toPoint(mgrs) {\r\n  if (mgrs === '') {\r\n    throw new TypeError('toPoint received a blank string');\r\n  }\r\n  const bbox = UTMtoLL(decode(mgrs.toUpperCase()));\r\n  if (typeof bbox.lat === 'number' && typeof bbox.lon === 'number') {\r\n    return [bbox.lon, bbox.lat];\r\n  }\r\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\r\n}\r\n\r\n/**\r\n * Conversion from degrees to radians.\r\n *\r\n * @private\r\n * @param {number} deg the angle in degrees.\r\n * @return {number} the angle in radians.\r\n */\r\nfunction degToRad(deg) {\r\n  return (deg * (Math.PI / 180));\r\n}\r\n\r\n/**\r\n * Conversion from radians to degrees.\r\n *\r\n * @private\r\n * @param {number} rad the angle in radians.\r\n * @return {number} the angle in degrees.\r\n */\r\nfunction radToDeg(rad) {\r\n  return (180 * (rad / Math.PI));\r\n}\r\n\r\n/**\r\n * Converts a set of Longitude and Latitude co-ordinates to UTM\r\n * using the WGS84 ellipsoid.\r\n *\r\n * @private\r\n * @param {object} ll Object literal with lat and lon properties\r\n *     representing the WGS84 coordinate to be converted.\r\n * @return {object} Object literal containing the UTM value with easting,\r\n *     northing, zoneNumber and zoneLetter properties, and an optional\r\n *     accuracy property in digits. Returns null if the conversion failed.\r\n */\r\nfunction LLtoUTM(ll) {\r\n  const Lat = ll.lat;\r\n  const Long = ll.lon;\r\n  const a = SEMI_MAJOR_AXIS;\r\n  const LatRad = degToRad(Lat);\r\n  const LongRad = degToRad(Long);\r\n  let ZoneNumber;\r\n  // (int)\r\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\r\n\r\n  //Make sure the longitude 180 is in Zone 60\r\n  if (Long === 180) {\r\n    ZoneNumber = 60;\r\n  }\r\n\r\n  // Special zone for Norway\r\n  if (Lat >= 56 && Lat < 64 && Long >= 3 && Long < 12) {\r\n    ZoneNumber = 32;\r\n  }\r\n\r\n  // Special zones for Svalbard\r\n  if (Lat >= 72 && Lat < 84) {\r\n    if (Long >= 0 && Long < 9) {\r\n      ZoneNumber = 31;\r\n    }\r\n    else if (Long >= 9 && Long < 21) {\r\n      ZoneNumber = 33;\r\n    }\r\n    else if (Long >= 21 && Long < 33) {\r\n      ZoneNumber = 35;\r\n    }\r\n    else if (Long >= 33 && Long < 42) {\r\n      ZoneNumber = 37;\r\n    }\r\n  }\r\n\r\n  // +HALF_UTM_ZONE_WIDTH puts origin in middle of zone\r\n  const LongOrigin = (ZoneNumber - 1) * UTM_ZONE_WIDTH - 180 + HALF_UTM_ZONE_WIDTH;\r\n\r\n  const LongOriginRad = degToRad(LongOrigin);\r\n\r\n  const eccPrimeSquared = (ECC_SQUARED) / (1 - ECC_SQUARED);\r\n\r\n  const N = a / Math.sqrt(1 - ECC_SQUARED * Math.sin(LatRad) * Math.sin(LatRad));\r\n  const T = Math.tan(LatRad) * Math.tan(LatRad);\r\n  const C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\r\n  const A = Math.cos(LatRad) * (LongRad - LongOriginRad);\r\n\r\n  const M = a * ((1 - ECC_SQUARED / 4 - 3 * ECC_SQUARED * ECC_SQUARED / 64 - 5 * ECC_SQUARED * ECC_SQUARED * ECC_SQUARED / 256) * LatRad - (3 * ECC_SQUARED / 8 + 3 * ECC_SQUARED * ECC_SQUARED / 32 + 45 * ECC_SQUARED * ECC_SQUARED * ECC_SQUARED / 1024) * Math.sin(2 * LatRad) + (15 * ECC_SQUARED * ECC_SQUARED / 256 + 45 * ECC_SQUARED * ECC_SQUARED * ECC_SQUARED / 1024) * Math.sin(4 * LatRad) - (35 * ECC_SQUARED * ECC_SQUARED * ECC_SQUARED / 3072) * Math.sin(6 * LatRad));\r\n\r\n  const UTMEasting = (SCALE_FACTOR * N * (A + (1 - T + C) * A * A * A / 6 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120) + EASTING_OFFSET);\r\n\r\n  let UTMNorthing = (SCALE_FACTOR * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720)));\r\n  if (Lat < 0) {\r\n    UTMNorthing += NORTHING_OFFFSET;\r\n  }\r\n\r\n  return {\r\n    northing: Math.trunc(UTMNorthing),\r\n    easting: Math.trunc(UTMEasting),\r\n    zoneNumber: ZoneNumber,\r\n    zoneLetter: getLetterDesignator(Lat)\r\n  };\r\n}\r\n\r\n/**\r\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\r\n * class where the Zone can be specified as a single string eg.\"60N\" which\r\n * is then broken down into the ZoneNumber and ZoneLetter.\r\n *\r\n * @private\r\n * @param {object} utm An object literal with northing, easting, zoneNumber\r\n *     and zoneLetter properties. If an optional accuracy property is\r\n *     provided (in meters), a bounding box will be returned instead of\r\n *     latitude and longitude.\r\n * @return {object} An object literal containing either lat and lon values\r\n *     (if no accuracy was provided), or top, right, bottom and left values\r\n *     for the bounding box calculated according to the provided accuracy.\r\n *     Returns null if the conversion failed.\r\n */\r\nfunction UTMtoLL(utm) {\r\n\r\n  const UTMNorthing = utm.northing;\r\n  const UTMEasting = utm.easting;\r\n  const { zoneLetter, zoneNumber } = utm;\r\n  // check the ZoneNummber is valid\r\n  if (zoneNumber < 0 || zoneNumber > 60) {\r\n    return null;\r\n  }\r\n\r\n  const a = SEMI_MAJOR_AXIS;\r\n  const e1 = (1 - Math.sqrt(1 - ECC_SQUARED)) / (1 + Math.sqrt(1 - ECC_SQUARED));\r\n\r\n  // remove 500,000 meter offset for longitude\r\n  const x = UTMEasting - EASTING_OFFSET;\r\n  let y = UTMNorthing;\r\n\r\n  // We must know somehow if we are in the Northern or Southern\r\n  // hemisphere, this is the only time we use the letter So even\r\n  // if the Zone letter isn't exactly correct it should indicate\r\n  // the hemisphere correctly\r\n  if (zoneLetter < 'N') {\r\n    y -= NORTHING_OFFFSET; // remove offset used for southern hemisphere\r\n  }\r\n\r\n  // +HALF_UTM_ZONE_WIDTH puts origin in middle of zone\r\n  const LongOrigin = (zoneNumber - 1) * UTM_ZONE_WIDTH - 180 + HALF_UTM_ZONE_WIDTH;\r\n\r\n  const eccPrimeSquared = (ECC_SQUARED) / (1 - ECC_SQUARED);\r\n\r\n  const M = y / SCALE_FACTOR;\r\n  const mu = M / (a * (1 - ECC_SQUARED / 4 - 3 * ECC_SQUARED * ECC_SQUARED / 64 - 5 * ECC_SQUARED * ECC_SQUARED * ECC_SQUARED / 256));\r\n\r\n  const phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\r\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\r\n\r\n  const N1 = a / Math.sqrt(1 - ECC_SQUARED * Math.sin(phi1Rad) * Math.sin(phi1Rad));\r\n  const T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\r\n  const C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\r\n  const R1 = a * (1 - ECC_SQUARED) / Math.pow(1 - ECC_SQUARED * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\r\n  const D = x / (N1 * SCALE_FACTOR);\r\n\r\n  let lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\r\n  lat = radToDeg(lat);\r\n\r\n  let lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\r\n  lon = LongOrigin + radToDeg(lon);\r\n\r\n  let result;\r\n  if (typeof utm.accuracy === 'number') {\r\n    const topRight = UTMtoLL({\r\n      northing: utm.northing + utm.accuracy,\r\n      easting: utm.easting + utm.accuracy,\r\n      zoneLetter: utm.zoneLetter,\r\n      zoneNumber: utm.zoneNumber\r\n    });\r\n    result = {\r\n      top: topRight.lat,\r\n      right: topRight.lon,\r\n      bottom: lat,\r\n      left: lon\r\n    };\r\n  }\r\n  else {\r\n    result = {\r\n      lat,\r\n      lon\r\n    };\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Calculates the MGRS letter designator for the given latitude.\r\n *\r\n * @private (Not intended for public API, only exported for testing.)\r\n * @param {number} latitude The latitude in WGS84 to get the letter designator\r\n *     for.\r\n * @return {string} The letter designator.\r\n */\r\nexport function getLetterDesignator(latitude) {\r\n  if (latitude <= 84 && latitude >= 72) {\r\n    // the X band is 12 degrees high\r\n    return 'X';\r\n  } else if (latitude < 72 && latitude >= -80) {\r\n    // Latitude bands are lettered C through X, excluding I and O\r\n    const bandLetters = 'CDEFGHJKLMNPQRSTUVWX';\r\n    const bandHeight = 8;\r\n    const minLatitude = -80;\r\n    const index = Math.floor((latitude - minLatitude) / bandHeight);\r\n    return bandLetters[index];\r\n  } else if (latitude > 84 || latitude < -80) {\r\n    //This is here as an error flag to show that the Latitude is\r\n    //outside MGRS limits\r\n    return 'Z';\r\n  }\r\n}\r\n\r\n/**\r\n * Encodes a UTM location as MGRS string.\r\n *\r\n * @private\r\n * @param {object} utm An object literal with easting, northing,\r\n *     zoneLetter, zoneNumber\r\n * @param {number} accuracy Accuracy in digits (0-5).\r\n * @return {string} MGRS string for the given UTM location.\r\n */\r\nfunction encode(utm, accuracy) {\r\n  // prepend with leading zeroes\r\n  const seasting = '00000' + utm.easting,\r\n    snorthing = '00000' + utm.northing;\r\n\r\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\r\n}\r\n\r\n/**\r\n * Get the two letter 100k designator for a given UTM easting,\r\n * northing and zone number value.\r\n *\r\n * @private\r\n * @param {number} easting\r\n * @param {number} northing\r\n * @param {number} zoneNumber\r\n * @return {string} the two letter 100k designator for the given UTM location.\r\n */\r\nfunction get100kID(easting, northing, zoneNumber) {\r\n  const setParm = get100kSetForZone(zoneNumber);\r\n  const setColumn = Math.floor(easting / 100000);\r\n  const setRow = Math.floor(northing / 100000) % 20;\r\n  return getLetter100kID(setColumn, setRow, setParm);\r\n}\r\n\r\n/**\r\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\r\n *\r\n * @private\r\n * @param {number} i An UTM zone number.\r\n * @return {number} the 100k set the UTM zone is in.\r\n */\r\nfunction get100kSetForZone(i) {\r\n  let setParm = i % NUM_100K_SETS;\r\n  if (setParm === 0) {\r\n    setParm = NUM_100K_SETS;\r\n  }\r\n\r\n  return setParm;\r\n}\r\n\r\n/**\r\n * Get the two-letter MGRS 100k designator given information\r\n * translated from the UTM northing, easting and zone number.\r\n *\r\n * @private\r\n * @param {number} column the column index as it relates to the MGRS\r\n *        100k set spreadsheet, created from the UTM easting.\r\n *        Values are 1-8.\r\n * @param {number} row the row index as it relates to the MGRS 100k set\r\n *        spreadsheet, created from the UTM northing value. Values\r\n *        are from 0-19.\r\n * @param {number} parm the set block, as it relates to the MGRS 100k set\r\n *        spreadsheet, created from the UTM zone. Values are from\r\n *        1-60.\r\n * @return {string} two letter MGRS 100k code.\r\n */\r\nfunction getLetter100kID(column, row, parm) {\r\n  // colOrigin and rowOrigin are the letters at the origin of the set\r\n  const index = parm - 1;\r\n  const colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\r\n  const rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\r\n\r\n  // colInt and rowInt are the letters to build to return\r\n  let colInt = colOrigin + column - 1;\r\n  let rowInt = rowOrigin + row;\r\n  let rollover = false;\r\n\r\n  if (colInt > Z) {\r\n    colInt = colInt - Z + A - 1;\r\n    rollover = true;\r\n  }\r\n\r\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\r\n    colInt++;\r\n  }\r\n\r\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\r\n    colInt++;\r\n\r\n    if (colInt === I) {\r\n      colInt++;\r\n    }\r\n  }\r\n\r\n  if (colInt > Z) {\r\n    colInt = colInt - Z + A - 1;\r\n  }\r\n\r\n  if (rowInt > V) {\r\n    rowInt = rowInt - V + A - 1;\r\n    rollover = true;\r\n  }\r\n  else {\r\n    rollover = false;\r\n  }\r\n\r\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\r\n    rowInt++;\r\n  }\r\n\r\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\r\n    rowInt++;\r\n\r\n    if (rowInt === I) {\r\n      rowInt++;\r\n    }\r\n  }\r\n\r\n  if (rowInt > V) {\r\n    rowInt = rowInt - V + A - 1;\r\n  }\r\n\r\n  const twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\r\n  return twoLetter;\r\n}\r\n\r\n/**\r\n * Decode the UTM parameters from a MGRS string.\r\n *\r\n * @private\r\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\r\n * @return {object} An object literal with easting, northing, zoneLetter,\r\n *     zoneNumber and accuracy (in meters) properties.\r\n */\r\nfunction decode(mgrsString) {\r\n\r\n  if (mgrsString && mgrsString.length === 0) {\r\n    throw new TypeError('MGRSPoint coverting from nothing');\r\n  }\r\n\r\n  //remove any spaces in MGRS String\r\n  mgrsString = mgrsString.replace(/ /g, '');\r\n\r\n  const { length } = mgrsString;\r\n\r\n  let hunK = null;\r\n  let sb = '';\r\n  let testChar;\r\n  let i = 0;\r\n\r\n  // get Zone number\r\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\r\n    if (i >= 2) {\r\n      throw new Error(`MGRSPoint bad conversion from: ${mgrsString}`);\r\n    }\r\n    sb += testChar;\r\n    i++;\r\n  }\r\n\r\n  const zoneNumber = parseInt(sb, 10);\r\n\r\n  if (i === 0 || i + 3 > length) {\r\n    // A good MGRS string has to be 4-5 digits long,\r\n    // ##AAA/#AAA at least.\r\n    throw new Error(`MGRSPoint bad conversion from ${mgrsString}`);\r\n  }\r\n\r\n  const zoneLetter = mgrsString.charAt(i++);\r\n\r\n  // Should we check the zone letter here? Why not.\r\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\r\n    throw new Error(`MGRSPoint zone letter ${zoneLetter} not handled: ${mgrsString}`);\r\n  }\r\n\r\n  hunK = mgrsString.substring(i, i += 2);\r\n\r\n  const set = get100kSetForZone(zoneNumber);\r\n\r\n  const east100k = getEastingFromChar(hunK.charAt(0), set);\r\n  let north100k = getNorthingFromChar(hunK.charAt(1), set);\r\n\r\n  // We have a bug where the northing may be 2000000 too low.\r\n  // How\r\n  // do we know when to roll over?\r\n\r\n  while (north100k < getMinNorthing(zoneLetter)) {\r\n    north100k += 2000000;\r\n  }\r\n\r\n  // calculate the char index for easting/northing separator\r\n  const remainder = length - i;\r\n\r\n  if (remainder % 2 !== 0) {\r\n    throw new Error(`MGRSPoint has to have an even number\r\nof digits after the zone letter and two 100km letters - front\r\nhalf for easting meters, second half for\r\nnorthing meters ${mgrsString}`);\r\n  }\r\n\r\n  const sep = remainder / 2;\r\n\r\n  let sepEasting = 0;\r\n  let sepNorthing = 0;\r\n  let accuracyBonus, sepEastingString, sepNorthingString;\r\n  if (sep > 0) {\r\n    accuracyBonus = 100000 / Math.pow(10, sep);\r\n    sepEastingString = mgrsString.substring(i, i + sep);\r\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\r\n    sepNorthingString = mgrsString.substring(i + sep);\r\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\r\n  }\r\n\r\n  const easting = sepEasting + east100k;\r\n  const northing = sepNorthing + north100k;\r\n\r\n  return {\r\n    easting,\r\n    northing,\r\n    zoneLetter,\r\n    zoneNumber,\r\n    accuracy: accuracyBonus\r\n  };\r\n}\r\n\r\n/**\r\n * Given the first letter from a two-letter MGRS 100k zone, and given the\r\n * MGRS table set for the zone number, figure out the easting value that\r\n * should be added to the other, secondary easting value.\r\n *\r\n * @private\r\n * @param {string} e The first letter from a two-letter MGRS 100´k zone.\r\n * @param {number} set The MGRS table set for the zone number.\r\n * @return {number} The easting value for the given letter and set.\r\n */\r\nfunction getEastingFromChar(e, set) {\r\n  // colOrigin is the letter at the origin of the set for the\r\n  // column\r\n  let curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\r\n  let eastingValue = 100000;\r\n  let rewindMarker = false;\r\n\r\n  while (curCol !== e.charCodeAt(0)) {\r\n    curCol++;\r\n    if (curCol === I) {\r\n      curCol++;\r\n    }\r\n    if (curCol === O) {\r\n      curCol++;\r\n    }\r\n    if (curCol > Z) {\r\n      if (rewindMarker) {\r\n        throw new Error(`Bad character: ${e}`);\r\n      }\r\n      curCol = A;\r\n      rewindMarker = true;\r\n    }\r\n    eastingValue += 100000;\r\n  }\r\n\r\n  return eastingValue;\r\n}\r\n\r\n/**\r\n * Given the second letter from a two-letter MGRS 100k zone, and given the\r\n * MGRS table set for the zone number, figure out the northing value that\r\n * should be added to the other, secondary northing value. You have to\r\n * remember that Northings are determined from the equator, and the vertical\r\n * cycle of letters mean a 2000000 additional northing meters. This happens\r\n * approx. every 18 degrees of latitude. This method does *NOT* count any\r\n * additional northings. You have to figure out how many 2000000 meters need\r\n * to be added for the zone letter of the MGRS coordinate.\r\n *\r\n * @private\r\n * @param {string} n Second letter of the MGRS 100k zone\r\n * @param {number} set The MGRS table set number, which is dependent on the\r\n *     UTM zone number.\r\n * @return {number} The northing value for the given letter and set.\r\n */\r\nfunction getNorthingFromChar(n, set) {\r\n\r\n  if (n > 'V') {\r\n    throw new TypeError(`MGRSPoint given invalid Northing ${n}`);\r\n  }\r\n\r\n  // rowOrigin is the letter at the origin of the set for the\r\n  // column\r\n  let curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\r\n  let northingValue = 0;\r\n  let rewindMarker = false;\r\n\r\n  while (curRow !== n.charCodeAt(0)) {\r\n    curRow++;\r\n    if (curRow === I) {\r\n      curRow++;\r\n    }\r\n    if (curRow === O) {\r\n      curRow++;\r\n    }\r\n    // fixing a bug making whole application hang in this loop\r\n    // when 'n' is a wrong character\r\n    if (curRow > V) {\r\n      if (rewindMarker) { // making sure that this loop ends\r\n        throw new Error(`Bad character: ${n}`);\r\n      }\r\n      curRow = A;\r\n      rewindMarker = true;\r\n    }\r\n    northingValue += 100000;\r\n  }\r\n\r\n  return northingValue;\r\n}\r\n\r\n/**\r\n * The function getMinNorthing returns the minimum northing value of a MGRS\r\n * zone.\r\n *\r\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\r\n *\r\n * @private\r\n * @param {string} zoneLetter The MGRS zone to get the min northing for.\r\n * @return {number}\r\n */\r\nfunction getMinNorthing(zoneLetter) {\r\n  let northing;\r\n  switch (zoneLetter) {\r\n  case 'C':\r\n    northing = 1100000;\r\n    break;\r\n  case 'D':\r\n    northing = 2000000;\r\n    break;\r\n  case 'E':\r\n    northing = 2800000;\r\n    break;\r\n  case 'F':\r\n    northing = 3700000;\r\n    break;\r\n  case 'G':\r\n    northing = 4600000;\r\n    break;\r\n  case 'H':\r\n    northing = 5500000;\r\n    break;\r\n  case 'J':\r\n    northing = 6400000;\r\n    break;\r\n  case 'K':\r\n    northing = 7300000;\r\n    break;\r\n  case 'L':\r\n    northing = 8200000;\r\n    break;\r\n  case 'M':\r\n    northing = 9100000;\r\n    break;\r\n  case 'N':\r\n    northing = 0;\r\n    break;\r\n  case 'P':\r\n    northing = 800000;\r\n    break;\r\n  case 'Q':\r\n    northing = 1700000;\r\n    break;\r\n  case 'R':\r\n    northing = 2600000;\r\n    break;\r\n  case 'S':\r\n    northing = 3500000;\r\n    break;\r\n  case 'T':\r\n    northing = 4400000;\r\n    break;\r\n  case 'U':\r\n    northing = 5300000;\r\n    break;\r\n  case 'V':\r\n    northing = 6200000;\r\n    break;\r\n  case 'W':\r\n    northing = 7000000;\r\n    break;\r\n  case 'X':\r\n    northing = 7900000;\r\n    break;\r\n  default:\r\n    northing = -1;\r\n  }\r\n  if (northing >= 0) {\r\n    return northing;\r\n  }\r\n  else {\r\n    throw new TypeError(`Invalid zone letter: ${zoneLetter}`);\r\n  }\r\n\r\n}\r\n"],"names":["A","I","O","degToRad","deg","Math","PI","radToDeg","rad","UTMtoLL","utm","UTMNorthing","northing","UTMEasting","easting","zoneLetter","zoneNumber","a","e1","sqrt","x","y","LongOrigin","UTM_ZONE_WIDTH","mu","phi1Rad","sin","N1","T1","tan","C1","cos","R1","pow","D","lat","result","lon","accuracy","topRight","top","right","bottom","left","getLetterDesignator","latitude","bandHeight","minLatitude","floor","get100kSetForZone","i","setParm","decode","mgrsString","length","TypeError","replace","testChar","hunK","sb","test","charAt","Error","parseInt","substring","set","east100k","e","curCol","charCodeAt","eastingValue","rewindMarker","getEastingFromChar","north100k","n","curRow","northingValue","getNorthingFromChar","getMinNorthing","remainder","sep","accuracyBonus","sepEastingString","sepNorthingString","sepEasting","sepNorthing","parseFloat","ll","Array","isArray","seasting","snorthing","setColumn","setRow","column","row","parm","index","colOrigin","rowOrigin","colInt","rowInt","rollover","String","fromCharCode","getLetter100kID","get100kID","substr","encode","Lat","Long","LatRad","LongRad","ZoneNumber","LongOriginRad","N","T","C","M","trunc","LLtoUTM","mgrs","bbox","toUpperCase","eastingMin","northingMin","eastingMax","northingMax","bottomLeft","bottomRight","topLeft"],"mappings":"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"}